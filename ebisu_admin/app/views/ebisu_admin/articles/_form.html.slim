javascript:
  var form_id = 0;
  function add_form(elm) {
    var new_elm = elm.clone();
    new_elm.id = '';
    rename_name_and_id_of_descendants(new_elm, form_id);
    form_id += 1;
    new_elm.removeAttr('style');
    $("#paragraphs").append(new_elm);

    update_positions();
  }
  function insert_after(prev, elm) {
    var new_elm = elm.clone();
    new_elm.id = '';
    rename_name_and_id_of_descendants(new_elm, form_id);
    form_id += 1;
    new_elm.removeAttr('style');
    $(prev).after(new_elm);

    update_positions();
  }
  function rename_name_and_id_of_descendants(elm, id) {
    if (elm.id) {
      elm.id = elm.id.replace(/\d+/, form_id);
    }
    if (elm.name) {
      elm.name = elm.name.replace(/\d+/, form_id);
    }

    $(elm).children().each(function(idx, e) { rename_name_and_id_of_descendants(e, id); });
  }
  function update_positions() {
    var paragraphs = $('#paragraphs');
    var index = 1;

    paragraphs.find('.form-root').each(function(idx, elm) {
      var pos = $(elm).find('.position');
      pos.attr('value', index);
      index++;
    })
  }
  function is_edited(elm) {
    var edited = false;
    $(elm).each(function (index, e) {
      if ($(e).attr('type') != "hidden" && $(e).val() != "") {
        edited = true;
        return false;
      }
    });
    return edited;
  }
  function destroy_form(elm) {
    var edited_flag = is_edited($(elm).find('input')) || is_edited($(elm).find('textarea'));

    if (edited_flag) {
      $(elm).find('h2').addClass('deleted');
      $(elm).find('.x_content').hide();
      $(elm).find('.panel_toolbox.for-valid').hide();
      $(elm).find('.panel_toolbox.for-deleted').show();
    } else {
      $(elm).hide();
    }
    $(elm).find('._destroy').val(true);
  }
  function recover_form(elm) {
    $(elm).find('h2').removeClass('deleted');
    $(elm).find('.x_content').show();
    $(elm).find('.panel_toolbox.for-valid').show();
    $(elm).find('.panel_toolbox.for-deleted').hide();
    $(elm).find('._destroy').val(false);
  }
  function move_up(elm) {
    elm.prev().before(elm);
    update_positions();
  }
  function move_down(elm) {
    elm.next().after(elm);
    update_positions();
  }

  window.addEventListener('load', () => {
    form_id = $('#number-of-paragraphs').data('value') + $('#number-of-templates').data('value');
    update_positions();
    $('#paragraphs').sortable({
      update: update_positions
    });
    $('#paragraphs').disableSelection();
  });

  $(function(){
    $(".datepicker").datepicker({
      dateFormat: "yy/mm/dd"
    });
  });

  $(document).ready(function (){$(".searchable").select2()})

#number-of-paragraphs data-value=article.paragraphs.size
= form_for article do |form|
  .form-group
    = form.label 'title', class: "col-md-2"
    = form.text_field :title, class: "form-control"
  - if current_user.has_role? :admin
    .form-group
      = form.label 'author', class: "col-md-2"
      - if User.method_defined?(:name)
        = form.collection_select :user_id, User.with_role(:writer), :id, :name, {}, { class: "form-control" }
      - else
        = form.collection_select :user_id, User.with_role(:writer), :id, :email, {}, { class: "form-control" }

  .form-group
    = form.label 'abstract', class: "col-md-2"
    = form.text_area :abstract, class: "form-control"
  .form-group
    = form.label :image
    = form.file_field :image
  .form-group
    = form.label :category_id
    = form.collection_select :category_id, Ebisu::Category.all.decorate, :id, :full_name, { prompt: "選択してください" }, { class: "form-control" }
  .form-group
    = form.label :tags
    = form.collection_select :tag_ids, Ebisu::Tag.all, :id, :name, { prompt: "選択してください" }, { class: "form-control searchable", multiple: true }
  .form-group
    = form.label :published_at
    = form.text_field :published_at, class: "form-control datepicker", value: (form.object.published_at || Time.now).strftime("%Y/%m/%d")
  .btn-toolbar.links
    .btn-group
      - Ebisu::Paragraph::SUBCLASSES.each do |klass|
        a.btn onclick="add_form($('##{template_id(klass)}').children().first())"
          = klass.constantize.model_name.human
  #templates
    #number-of-templates data-value=Ebisu::Article.template_article.paragraphs.size
    = form.fields_for :paragraphs, Ebisu::Article.template_article.paragraphs do |f|
      = f.hidden_field :template?, value: true
      div id=template_id(f.object.type) style="display: none;"
        = render "template_form", type: f.object.type, form: f
  ul#paragraphs style="list-style-type: none; padding: 0"
    - if article.paragraphs.rank(:position).present?
      = form.fields_for :paragraphs, article.paragraphs.rank(:position) do |f|
        = render "template_form", type: f.object.type, form: f
    - else
      = form.fields_for :paragraphs, article.paragraphs do |f|
        = render "template_form", type: f.object.type, form: f
  .form-group
    = form.submit "Submit", class: "btn btn-success"
